{
  "version": 4,
  "terraform_version": "1.9.1",
  "serial": 171,
  "lineage": "dbd7fe34-3d87-a471-f31d-248af6600b7a",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": true,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.11.4",
                "chart": "argo-cd",
                "first_deployed": 1720090012,
                "last_deployed": 1720090012,
                "name": "argocd",
                "namespace": "argocd",
                "notes": "In order to access the server UI you have the following options:\n\n1. kubectl port-forward service/argocd-server -n argocd 8080:443\n\n    and then open the browser on http://localhost:8080 and accept the certificate\n\n2. enable ingress in the values file `server.ingress.enabled` and either\n      - Add the annotation for ssl passthrough: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough\n      - Set the `configs.params.\"server.insecure\"` in the values file and terminate SSL at your ingress: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts\n\n\nAfter reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:\n\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli)\n",
                "revision": 1,
                "values": "{\"applicationSet\":{\"replicaCount\":1},\"controller\":{\"replicas\":1},\"repoServer\":{\"replicas\":1},\"server\":{\"replicas\":1,\"service\":{\"extraArgs\":[\"--insecure\"],\"type\":\"ClusterIP\"}}}",
                "version": "7.3.4"
              }
            ],
            "name": "argocd",
            "namespace": "argocd",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "# redis-ha:\n#   enabled: true\n\ncontroller:\n  replicas: 1\n\nserver:\n  replicas: 1\n  service:\n    type: ClusterIP\n    extraArgs:\n    - \"--insecure\"\n\nrepoServer:\n  replicas: 1\n\napplicationSet:\n  replicaCount: 1\n  # replicaCount: 2\n"
            ],
            "verify": false,
            "version": "7.3.4",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "nginx_ingress",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "ingress-nginx",
            "cleanup_on_fail": true,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "tuna-route",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.8.0",
                "chart": "ingress-nginx",
                "first_deployed": 1720090013,
                "last_deployed": 1720090013,
                "name": "tuna-route",
                "namespace": "ingress-nginx",
                "notes": "The ingress-nginx controller has been installed.\nGet the application URL by running these commands:\n  export HTTP_NODE_PORT=$(kubectl --namespace ingress-nginx get services -o jsonpath=\"{.spec.ports[0].nodePort}\" tuna-route-ingress-nginx-controller)\n  export HTTPS_NODE_PORT=$(kubectl --namespace ingress-nginx get services -o jsonpath=\"{.spec.ports[1].nodePort}\" tuna-route-ingress-nginx-controller)\n  export NODE_IP=$(kubectl --namespace ingress-nginx get nodes -o jsonpath=\"{.items[0].status.addresses[1].address}\")\n\n  echo \"Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\"\n  echo \"Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\"\n\nAn example Ingress that makes use of the controller:\n  apiVersion: networking.k8s.io/v1\n  kind: Ingress\n  metadata:\n    name: example\n    namespace: foo\n  spec:\n    ingressClassName: nginx\n    rules:\n      - host: www.example.com\n        http:\n          paths:\n            - pathType: Prefix\n              backend:\n                service:\n                  name: exampleService\n                  port:\n                    number: 80\n              path: /\n    # This section is only required if TLS is to be enabled for the Ingress\n    tls:\n      - hosts:\n        - www.example.com\n        secretName: example-tls\n\nIf TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:\n\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: example-tls\n    namespace: foo\n  data:\n    tls.crt: \u003cbase64 encoded cert\u003e\n    tls.key: \u003cbase64 encoded key\u003e\n  type: kubernetes.io/tls\n",
                "revision": 1,
                "values": "{\"controller\":{\"admissionWebhooks\":{\"enabled\":true},\"ingressClass\":{\"setAsDefaultIngress\":true},\"publishService\":{\"enabled\":true},\"replicaCount\":2,\"service\":{\"externalTrafficPolicy\":\"Local\",\"loadBalancerIP\":\"194.195.112.112\",\"type\":\"NodePort\"}}}",
                "version": "4.7.0"
              }
            ],
            "name": "tuna-route",
            "namespace": "ingress-nginx",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubernetes.github.io/ingress-nginx",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "controller.admissionWebhooks.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "controller.ingressClass.setAsDefaultIngress",
                "type": "",
                "value": "true"
              },
              {
                "name": "controller.publishService.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "controller.replicaCount",
                "type": "",
                "value": "2"
              },
              {
                "name": "controller.service.externalTrafficPolicy",
                "type": "",
                "value": "Local"
              },
              {
                "name": "controller.service.loadBalancerIP",
                "type": "",
                "value": "194.195.112.112"
              },
              {
                "name": "controller.service.type",
                "type": "",
                "value": "NodePort"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 200,
            "values": null,
            "verify": false,
            "version": "4.7.0",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.ingress_nginx"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_deployment",
      "name": "test",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "nginx/nginx",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 1,
                "labels": null,
                "name": "nginx",
                "namespace": "nginx",
                "resource_version": "125332",
                "uid": "54f5c519-a931-49e4-b94f-ce29320a7cad"
              }
            ],
            "spec": [
              {
                "min_ready_seconds": 0,
                "paused": false,
                "progress_deadline_seconds": 600,
                "replicas": "2",
                "revision_history_limit": 10,
                "selector": [
                  {
                    "match_expressions": [],
                    "match_labels": {
                      "app": "MyTestApp"
                    }
                  }
                ],
                "strategy": [
                  {
                    "rolling_update": [
                      {
                        "max_surge": "25%",
                        "max_unavailable": "25%"
                      }
                    ],
                    "type": "RollingUpdate"
                  }
                ],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": {
                          "app": "MyTestApp"
                        },
                        "name": "",
                        "namespace": "",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": null,
                            "env": [],
                            "env_from": [],
                            "image": "nginx",
                            "image_pull_policy": "Always",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "nginx-container",
                            "port": [
                              {
                                "container_port": 80,
                                "host_ip": "",
                                "host_port": 0,
                                "name": "",
                                "protocol": "TCP"
                              }
                            ],
                            "readiness_probe": [],
                            "resources": [
                              {
                                "limits": {},
                                "requests": {}
                              }
                            ],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "File",
                            "tty": false,
                            "volume_mount": [],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Always",
                        "runtime_class_name": "",
                        "scheduler_name": "default-scheduler",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": []
                      }
                    ]
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_rollout": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "kubernetes_namespace.test"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "argocd",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "argocd",
                "resource_version": "125275",
                "uid": "4ff12419-b2b4-4889-a39c-4d4c4d770a80"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "ingress_nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "ingress-nginx",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "ingress-nginx",
                "resource_version": "125276",
                "uid": "7f572157-441a-4ae6-8dba-eb4b6de0e903"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "test",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "nginx",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "nginx",
                "resource_version": "125274",
                "uid": "6a2fe8cc-84c3-4515-9b4c-bb5e054cf605"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "test",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "nginx/nginx",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "nginx",
                "namespace": "nginx",
                "resource_version": "125356",
                "uid": "96ed6cd7-3ebc-4dd5-863f-82ce75752a93"
              }
            ],
            "spec": [
              {
                "allocate_load_balancer_node_ports": true,
                "cluster_ip": "10.110.55.29",
                "cluster_ips": [
                  "10.110.55.29"
                ],
                "external_ips": null,
                "external_name": "",
                "external_traffic_policy": "Cluster",
                "health_check_node_port": 0,
                "internal_traffic_policy": "Cluster",
                "ip_families": [
                  "IPv4"
                ],
                "ip_family_policy": "SingleStack",
                "load_balancer_class": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": null,
                "port": [
                  {
                    "app_protocol": "",
                    "name": "",
                    "node_port": 30201,
                    "port": 80,
                    "protocol": "TCP",
                    "target_port": "80"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "MyTestApp"
                },
                "session_affinity": "None",
                "session_affinity_config": [],
                "type": "NodePort"
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_deployment.test",
            "kubernetes_namespace.test"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
